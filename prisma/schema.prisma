// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions  Session[]
  accounts  Account[]
  payroll   Payroll[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  phone         String?
  company       String?
  remarks       String?
  accountStatus String        @default("Active")
  gatePassId    String        @unique
  packageId     Int?
  branchId      Int
  package       Package?      @relation(fields: [packageId], references: [id])
  branch        Branch        @relation(fields: [branchId], references: [id])
  complaints    Complaint[]
  contracts     Contract[]
  payments      Payment[]
  notifications Notification[]
  timeEntries   TimeEntry[]
  bookings      Booking[]
  invoices      Invoice[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Package {
  id        Int       @id @default(autoincrement())
  name      String
  price     Float
  duration  Int       // in days
  startDate DateTime?
  expiryDate DateTime?
  status    String
  customers Customer[]
  limits    PackageLimit[]
}

model Complaint {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  title       String
  description String
  status      String    @default("Open")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resolvedAt  DateTime?
  imageUrl    String?
  feedback    Feedback?
}

model Feedback {
  id          Int       @id @default(autoincrement())
  complaintId Int       @unique
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
}

model Contract {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  fileUrl     String?
  status      String    @default("Requested")
  createdAt   DateTime  @default(now())
}

model Payment {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  amount      Float
  status      String    @default("Pending") // Pending, Completed, Failed
  method      String?   // Credit Card, Bank Transfer, Cash, etc.
  transactionId String?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  type        String    // AccountLocked, AccountUnlocked, PaymentReminder, etc.
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model TimeEntry {
  id           Int       @id @default(autoincrement())
  customerId   Int
  customer     Customer  @relation(fields: [customerId], references: [id])
  checkInTime  DateTime
  checkOutTime DateTime?
  duration     Int?      // in minutes
  status       String    @default("Checked In") // Checked In, Checked Out
  notes        String?
  date         String    // YYYY-MM-DD format
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model MeetingRoom {
  id          Int       @id @default(autoincrement())
  name        String
  capacity    Int
  location    String
  amenities   String    // Comma-separated amenities
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Booking {
  id          Int         @id @default(autoincrement())
  customerId  Int
  customer    Customer    @relation(fields: [customerId], references: [id])
  roomId      Int
  room        MeetingRoom @relation(fields: [roomId], references: [id])
  date        String      // YYYY-MM-DD format
  startTime   String      // HH:MM format
  endTime     String      // HH:MM format
  duration    Int         // in minutes
  status      String      @default("Confirmed") // Confirmed, Cancelled, Completed
  purpose     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model PackageLimit {
  id          Int     @id @default(autoincrement())
  packageId   Int
  package     Package @relation(fields: [packageId], references: [id])
  monthlyHours Int    @default(40) // Monthly booking limit in hours
  dailyHours  Int     @default(2)  // Daily booking limit in hours
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Branch model for multi-location support
model Branch {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  customers   Customer[]
  invoices    Invoice[]
  vendors     Vendor[]
  accounts    AccountChart[]
  transactions Transaction[]
  payroll     Payroll[]
  payments    Payment[]
  bills       Bill[]
  cashFlow    CashFlow[]
}

// Vendor management
model Vendor {
  id          Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  address     String?
  taxId       String?
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  bills       Bill[]
}

// Chart of Accounts
model AccountChart {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  type        String    // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  category    String    // Current Asset, Fixed Asset, etc.
  parentId    Int?
  parent      AccountChart? @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    AccountChart[] @relation("AccountHierarchy")
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  balance     Float     @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  transactions Transaction[]
}

// Invoice management
model Invoice {
  id          Int       @id @default(autoincrement())
  invoiceNumber String  @unique
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  issueDate   DateTime
  dueDate     DateTime
  status      String    @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  subtotal    Float
  taxRate     Float     @default(0)
  taxAmount   Float     @default(0)
  total       Float
  notes       String?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  items       InvoiceItem[]
  payments    InvoicePayment[]
}

model InvoiceItem {
  id          Int       @id @default(autoincrement())
  invoiceId   Int
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  createdAt   DateTime  @default(now())
}

model InvoicePayment {
  id          Int       @id @default(autoincrement())
  invoiceId   Int
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  amount      Float
  method      String    // CASH, BANK_TRANSFER, CREDIT_CARD, CHECK
  reference   String?
  paidAt      DateTime
  createdAt   DateTime  @default(now())
}

// Bill management for vendor payments
model Bill {
  id          Int       @id @default(autoincrement())
  billNumber  String    @unique
  vendorId    Int
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  issueDate   DateTime
  dueDate     DateTime
  status      String    @default("PENDING") // PENDING, APPROVED, PAID, OVERDUE
  subtotal    Float
  taxRate     Float     @default(0)
  taxAmount   Float     @default(0)
  total       Float
  notes       String?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  items       BillItem[]
  payments    BillPayment[]
}

model BillItem {
  id          Int       @id @default(autoincrement())
  billId      Int
  bill        Bill      @relation(fields: [billId], references: [id])
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  createdAt   DateTime  @default(now())
}

model BillPayment {
  id          Int       @id @default(autoincrement())
  billId      Int
  bill        Bill      @relation(fields: [billId], references: [id])
  amount      Float
  method      String
  reference   String?
  paidAt      DateTime
  createdAt   DateTime  @default(now())
}

// Transaction management for all financial movements
model Transaction {
  id          Int       @id @default(autoincrement())
  transactionNumber String @unique
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  accountId   Int
  account     AccountChart @relation(fields: [accountId], references: [id])
  type        String    // DEBIT, CREDIT
  amount      Float
  description String
  category    String    // RENT, SALARY, UTILITIES, etc.
  reference   String?   // Invoice/Bill number, etc.
  date        DateTime
  createdBy   String?   // User ID who created this
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Payroll management
model Payroll {
  id          Int       @id @default(autoincrement())
  employeeId  String
  employee    User      @relation(fields: [employeeId], references: [id])
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  payPeriod   String    // YYYY-MM format
  baseSalary  Float
  overtime    Float     @default(0)
  bonus       Float     @default(0)
  deductions  Float     @default(0)
  netPay      Float
  status      String    @default("PENDING") // PENDING, APPROVED, PAID
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  items       PayrollItem[]
}

model PayrollItem {
  id          Int       @id @default(autoincrement())
  payrollId   Int
  payroll     Payroll   @relation(fields: [payrollId], references: [id])
  type        String    // SALARY, OVERTIME, BONUS, TAX, INSURANCE, etc.
  description String
  amount      Float
  isDeduction Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

// Cash flow tracking
model CashFlow {
  id          Int       @id @default(autoincrement())
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  date        DateTime
  cashIn      Float     @default(0)
  cashOut     Float     @default(0)
  balance     Float     @default(0)
  description String
  category    String
  createdAt   DateTime  @default(now())
}

// Update existing models to include branch relations
// Add branchId to Customer
// Add branchId to existing Payment model
// Add payroll relation to User model

// Enums converted to strings for SQLite compatibility
// Role: CUSTOMER, MANAGER, ADMIN, EMPLOYEE
// AccountStatus: ACTIVE, LOCKED